---
title: "CO2 Emissions Report"
author: "Kazim Lamine"
format: html
execute:
  warning: false
  echo: false
---

```{python}
import pandas as pd
import numpy as np
import plotly.express as px
from itables import show
import country_converter as coco
from IPython.display import HTML
```

```{python}
import warnings
# Ignoring all warnings
warnings.filterwarnings("ignore")
```

```{python}
# Load the data
emissions = pd.read_csv("data/co2_cons.csv")
```

```{python}
for col in ["2021", "2022"]:
    has_k = emissions[col].str.contains("k")
    values = emissions[col].str.replace("k", "")
    emissions[col] = np.where(has_k, values.astype(float) * 1000, values.astype(float))
```

```{python}

# Subset the data to include `country`, `2000`, and `2022` columns only.
table_df = emissions[['country', '2000', '2022']]

# Calculate absolute change as the difference between 2022 and 2000
table_df["Absolute Change"] = table_df["Absolute Change"] = table_df["2022"] - table_df["2000"]

# Calculate relative change as the absolute change divided by the 2000 emissions, then multiplied by 100
table_df["Relative Change"] = table_df["Relative Change"] = ((table_df["2022"] - table_df["2000"]) / table_df["2000"]) * 100

# Round to 0 decimal places, and add a % sign to the relative change
table_df["Relative Change"] = table_df["Relative Change"].round(0).astype(str) + "%"

```


```{python}
# Melt the dataset. Your id_vars should be "country", your var_name should be "year" and your value_name should be "emissions".
emissions_long = emissions.melt(id_vars=["country"], var_name="year", value_name="emissions")

# Convert year to numeric using pd.to_numeric
emissions_long["year"] = pd.to_numeric(emissions_long["year"], errors="coerce")

# Convert emissions to numeric using pd.to_numeric
emissions_long["emissions"] = pd.to_numeric(emissions_long["emissions"], errors="coerce")

# Query for years between 1990 and 2022 (that is 1990, 1991, ..., 2022)
emissions_long_1990_2022 = emissions_long.query("1990 <=year<=2022")

# Query for 5 countries (adjust these to any countries you like)
countries_of_interest = ["United States", "China", "Niger", "Nigeria", "Australia"]

chart_data = emissions_long_1990_2022[emissions_long_1990_2022["country"].isin(countries_of_interest)]

# Create line chart. Year should be on the x-axis, emissions on the y-axis, and color should be by country.

fig_chart = px.line(
    chart_data,
    x="year",
    y="emissions",
    color="country",
    title="CO2 Emissions (1990-2022) for Selected Countries",
    labels={
        "Emissions": "CO2 Emissions (Metric Tons)",
        "year": "Year",
        "country": "country"
    },
    template="plotly"
)
```



```{python}
# Convert country names to ISO3 codes
emissions_long_1990_2022["country_code"] = coco.convert(
    emissions_long_1990_2022["country"], to="ISO3"
)

fig_map = px.choropleth(
    emissions_long_1990_2022,
    locations="country_code",
    color="emissions",
    hover_name="country",
    animation_frame="year",
    title="Global CO2 Emissions (1990-2022)",
)
```

::: {.panel-tabset}

## Table

```{python}
show(table_df)
```

## Chart

```{python}
fig_chart.show()
```

## Map

```{python}
fig_map.show()
```

:::
